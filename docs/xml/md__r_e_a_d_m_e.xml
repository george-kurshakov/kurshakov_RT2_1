<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="md__r_e_a_d_m_e" kind="page">
    <compoundname>md_README</compoundname>
    <title>Solution to the First Assignment of the Research Track 2 course (Robotics Engineering / JEMARO, Unige)</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="md__r_e_a_d_m_e_1autotoc_md1">
<title>By Georgii A. Kurshakov</title>
<para>The package contains the nodes and the simulation environment for controlling a mobile robot in the Gazebo simulation environment. <blockquote><para>This branch contains the Doxygen documentation since it was here from the beginning! For the Sphinx documentation another branch will be created. </para>
</blockquote></para>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md2">
<title>Required packages</title>
<para><itemizedlist>
<listitem><para>roscpp</para>
</listitem><listitem><para>rospy</para>
</listitem><listitem><para>message_generation</para>
</listitem><listitem><para>actionlib</para>
</listitem><listitem><para>actionlib_msgs</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md3">
<title>Description of the system</title>
<para>The package consists of the following nodes:</para>
<para><itemizedlist>
<listitem><para><bold>state_machine</bold></para>
</listitem><listitem><para><bold>random_position_server</bold></para>
</listitem><listitem><para><bold><ref refid="namespacego__to__point" kindref="compound">go_to_point</ref></bold></para>
</listitem></itemizedlist>
</para>
<sect3 id="md__r_e_a_d_m_e_1autotoc_md4">
<title>state_machine</title>
<para>A node managing the robot behaviour. It receives commands from <bold>user_interface</bold> via a service and implements a simple finite state machine. It can request the <bold>random_position_server</bold> for a random position, send this position as a goal for <bold><ref refid="namespacego__to__point" kindref="compound">go_to_point</ref></bold> action and cancel the goal if requested.</para>
</sect3>
<sect3 id="md__r_e_a_d_m_e_1autotoc_md5">
<title>random_position_server</title>
<para>A node implementing a service for generating random positions. Provides the <bold>state_machine</bold> with random positions for <bold><ref refid="namespacego__to__point" kindref="compound">go_to_point</ref></bold>.</para>
</sect3>
<sect3 id="md__r_e_a_d_m_e_1autotoc_md6">
<title>go_to_point</title>
<para>A node implementing an action for reaching the goal position using a publisher on topic */cmd_vel* and a subscriber on topic */odom*. <bold>state_machine</bold> is able to send a goal and cancel it. Once the goal is cancelled, the robot stops immediately.</para>
</sect3>
</sect2>
<sect2 id="md__r_e_a_d_m_e_1autotoc_md7">
<title>Instructions to run the code</title>
<para>All the instructions can be found in the <bold>interface.ipynb</bold> Jupyter Notebook file. </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
